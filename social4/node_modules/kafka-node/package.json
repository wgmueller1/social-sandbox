{
  "name": "kafka-node",
  "description": "node client for Apache kafka, only support kafka 0.8 and above",
  "version": "0.2.27",
  "main": "kafka.js",
  "dependencies": {
    "async": "~0.9.0",
    "binary": "~0.3.0",
    "buffer-crc32": "~0.2.5",
    "buffermaker": "~1.2.0",
    "debug": "^2.1.3",
    "lodash": "~3.5.0",
    "node-uuid": "~1.4.3",
    "node-zookeeper-client": "~0.2.2",
    "retry": "~0.6.1",
    "snappy": "^3.2.0"
  },
  "devDependencies": {
    "mocha": "^2.2.1",
    "should": "^5.2.0",
    "optimist": "^0.6.1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:SOHU-Co/kafka-node.git"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "Kafka-node\n==========\n\n[![NPM](https://nodei.co/npm/kafka-node.png)](https://nodei.co/npm/kafka-node/)\n[![NPM](https://nodei.co/npm-dl/kafka-node.png?height=3)](https://nodei.co/npm/kafka-node/)\n\nKafka-node is a Node.js client with Zookeeper integration for Apache Kafka 0.8.1 and later.\n\nThe Zookeeper integration does the following jobs:\n\n* Loads broker metadata from Zookeeper before we can communicate with the Kafka server\n* Watches broker state, if broker changes, the client will refresh broker and topic metadata stored in the client\n\n# Install Kafka\nFollow the [instructions](http://kafka.apache.org/documentation.html#quickstart) on the Kafka wiki to build Kafka 0.8 and get a test broker up and running.\n\n# API\n## Client\n### Client(connectionString, clientId, [zkOptions])\n* `connectionString`: Zookeeper connection string, default `localhost:2181/`\n* `clientId`: This is a user-supplied identifier for the client application, default `kafka-node-client`\n* `zkOptions`: **Object**, Zookeeper options, see [node-zookeeper-client](https://github.com/alexguan/node-zookeeper-client#client-createclientconnectionstring-options)\n\n### close(cb)\nCloses the connection to Zookeeper and the brokers so that the node process can exit gracefully.\n\n* `cb`: **Function**, the callback\n\n## Producer\n### Producer(client, [options])\n* `client`: client which keeps a connection with the Kafka server.\n* `options`: set `requireAcks` and `ackTimeoutMs` for producer, the default value is `{requireAcks: 1, ackTimeoutMs: 100}`\n\n``` js\nvar kafka = require('kafka-node'),\n    Producer = kafka.Producer,\n    client = new kafka.Client(),\n    producer = new Producer(client);\n```\n\n### Events\n\n- `ready`: this event is emitted when producer is ready to send messages.\n- `error`: this is the error event propagates from internal client, producer should always listen it.\n\n### send(payloads, cb)\n* `payloads`: **Array**,array of `ProduceRequest`, `ProduceRequest` is a JSON object like:\n\n``` js\n{\n   topic: 'topicName',\n   messages: ['message body'],// multi messages should be a array, single message can be just a string or a KeyedMessage instance\n   partition: 0, //default 0\n   attributes: 2, // default: 0\n}\n```\n\n* `cb`: **Function**, the callback\n\n`attributes` controls compression of the message set. It supports the following values:\n\n* `0`: No compression\n* `1`: Compress using GZip\n* `2`: Compress using snappy\n\nExample:\n\n``` js\nvar kafka = require('kafka-node'),\n    Producer = kafka.Producer,\n    KeyedMessage = kafka.KeyedMessage,\n    client = new kafka.Client(),\n    producer = new Producer(client),\n    km = new KeyedMessage('key', 'message'),\n    payloads = [\n        { topic: 'topic1', messages: 'hi', partition: 0 },\n        { topic: 'topic2', messages: ['hello', 'world', km] }\n    ];\nproducer.on('ready', function () {\n    producer.send(payloads, function (err, data) {\n        console.log(data);\n    });\n});\n\nproducer.on('error', function (err) {})\n```\n\n### createTopics(topics, async, cb)\nThis method is used to create topics on the Kafka server. It only works when `auto.create.topics.enable`, on the Kafka server, is set to true. Our client simply sends a metadata request to the server which will auto create topics. When `async` is set to false, this method does not return until all topics are created, otherwise it returns immediately.\n\n* `topics`: **Array**, array of topics\n* `async`: **Boolean**, async or sync\n* `cb`: **Function**, the callback\n\nExample:\n\n``` js\nvar kafka = require('kafka-node'),\n    Producer = kafka.Producer,\n    client = new kafka.Client(),\n    producer = new Producer(client);\n// Create topics sync\nproducer.createTopics(['t','t1'], false, function (err, data) {\n    console.log(data);\n});\n// Create topics async\nproducer.createTopics(['t'], true, function (err, data) {});\nproducer.createTopics(['t'], function (err, data) {});// Simply omit 2nd arg\n```\n\n\n## HighLevelProducer\n### HighLevelProducer(client, [options])\n* `client`: client which keeps a connection with the Kafka server. Round-robins produce requests to the available topic partitions\n* `options`: set `requireAcks` and `ackTimeoutMs` for producer, the default value is `{requireAcks: 1, ackTimeoutMs: 100}`\n\n``` js\nvar kafka = require('kafka-node'),\n    HighLevelProducer = kafka.HighLevelProducer,\n    client = new kafka.Client(),\n    producer = new HighLevelProducer(client);\n```\n\n### Events\n\n- `ready`: this event is emitted when producer is ready to send messages.\n- `error`: this is the error event propagates from internal client, producer should always listen it.\n\n### send(payloads, cb)\n* `payloads`: **Array**,array of `ProduceRequest`, `ProduceRequest` is a JSON object like:\n\n``` js\n{\n   topic: 'topicName',\n   messages: ['message body'],// multi messages should be a array, single message can be just a string\n   attributes: 1\n}\n```\n\n* `cb`: **Function**, the callback\n\nExample:\n\n``` js\nvar kafka = require('kafka-node'),\n    HighLevelProducer = kafka.HighLevelProducer,\n    client = new kafka.Client(),\n    producer = new HighLevelProducer(client),\n    payloads = [\n        { topic: 'topic1', messages: 'hi' },\n        { topic: 'topic2', messages: ['hello', 'world'] }\n    ];\nproducer.on('ready', function () {\n    producer.send(payloads, function (err, data) {\n        console.log(data);\n    });\n});\n```\n\n### createTopics(topics, async, cb)\nThis method is used to create topics on the Kafka server. It only work when `auto.create.topics.enable`, on the Kafka server, is set to true. Our client simply sends a metadata request to the server which will auto create topics. When `async` is set to false, this method does not return until all topics are created, otherwise it returns immediately.\n\n* `topics`: **Array**,array of topics\n* `async`: **Boolean**,async or sync\n* `cb`: **Function**,the callback\n\nExample:\n\n``` js\nvar kafka = require('kafka-node'),\n    HighLevelProducer = kafka.HighLevelProducer,\n    client = new kafka.Client(),\n    producer = new HighLevelProducer(client);\n// Create topics sync\nproducer.createTopics(['t','t1'], false, function (err, data) {\n    console.log(data);\n});\n// Create topics async\nproducer.createTopics(['t'], true, function (err, data) {});\nproducer.createTopics(['t'], function (err, data) {});// Simply omit 2nd arg\n```\n\n## Consumer\n### Consumer(client, payloads, options)\n* `client`: client which keeps a connection with the Kafka server. **Note**: it's recommend that create new client for different consumers.\n* `payloads`: **Array**,array of `FetchRequest`, `FetchRequest` is a JSON object like:\n\n``` js\n{\n   topic: 'topicName',\n   offset: 0, //default 0\n}\n```\n\n* `options`: options for consumer,\n\n```js\n{\n    groupId: 'kafka-node-group',//consumer group id, deafult `kafka-node-group`\n    // Auto commit config\n    autoCommit: true,\n    autoCommitIntervalMs: 5000,\n    // The max wait time is the maximum amount of time in milliseconds to block waiting if insufficient data is available at the time the request is issued, default 100ms\n    fetchMaxWaitMs: 100,\n    // This is the minimum number of bytes of messages that must be available to give a response, default 1 byte\n    fetchMinBytes: 1,\n    // The maximum bytes to include in the message set for this partition. This helps bound the size of the response.\n    fetchMaxBytes: 1024 * 10,\n    // If set true, consumer will fetch message from the given offset in the payloads\n    fromOffset: false,\n    // If set to 'buffer', values will be returned as raw buffer objects.\n    encoding: 'utf8'\n}\n```\nExample:\n\n``` js\nvar kafka = require('kafka-node'),\n    Consumer = kafka.Consumer,\n    client = new kafka.Client(),\n    consumer = new Consumer(\n        client,\n        [\n            { topic: 't', partition: 0 }, { topic: 't1', partition: 1 }\n        ],\n        {\n            autoCommit: false\n        }\n    );\n```\n\n### on('message', onMessage);\nBy default, we will consume messages from the last committed offset of the current group\n\n* `onMessage`: **Function**, callback when new message comes\n\nExample:\n\n``` js\nconsumer.on('message', function (message) {\n    console.log(message);\n});\n```\n\n### on('error', function (err) {})\n\n\n### on('offsetOutOfRange', function (err) {})\n\n\n### addTopics(topics, cb, fromOffset)\nAdd topics to current consumer, if any topic to be added not exists, return error\n* `topics`: **Array**, array of topics to add\n* `cb`: **Function**,the callback\n* `fromOffset`: **Boolean**, if true, the consumer will fetch message from the specified offset, otherwise it will fetch message from the last commited offset of the topic.\n\nExample:\n\n``` js\nconsumer.addTopics(['t1', 't2'], function (err, added) {\n});\n\nor\n\nconsumer.addTopics([{ topic: 't1', offset: 10 }], function (err, added) {\n}, true);\n```\n\n### removeTopics(topics, cb)\n* `topics`: **Array**, array of topics to remove\n* `cb`: **Function**, the callback\n\nExample:\n\n``` js\nconsumer.removeTopics(['t1', 't2'], function (err, removed) {\n});\n```\n\n### commit(cb)\nCommit offset of the current topics manually, this method should be called when a consumer leaves\n\n* `cb`: **Function**, the callback\n\nExample:\n\n``` js\nconsumer.commit(function(err, data) {\n});\n```\n\n### setOffset(topic, partition, offset)\nSet offset of the given topic\n\n* `topic`: **String**\n\n* `partition`: **Number**\n\n* `offset`: **Number**\n\nExample:\n\n``` js\nconsumer.setOffset('topic', 0, 0);\n```\n\n### pause()\nPause the consumer\n\n### resume()\nResume the consumer\n\n### pauseTopics(topics)\nPause specify topics\n\n```\nconsumer.pauseTopics([\n    'topic1',\n    { topic: 'topic2', partition: 0 }\n]);\n```\n\n### resumeTopics(topics)\nResume specify topics\n\n```\nconsumer.resumeTopics([\n    'topic1',\n    { topic: 'topic2', partition: 0 }\n]);\n```\n\n### close(force, cb)\n* `force`: **Boolean**, if set to true, it forces the consumer to commit the current offset before closing, default `false`\n\nExample\n\n```js\nconsumer.close(true, cb);\nconsumer.close(cb); //force is disabled\n```\n\n## HighLevelConsumer\n### HighLevelConsumer(client, payloads, options)\n* `client`: client which keeps a connection with the Kafka server.\n* `payloads`: **Array**,array of `FetchRequest`, `FetchRequest` is a JSON object like:\n\n``` js\n{\n   topic: 'topicName'\n}\n```\n\n* `options`: options for consumer,\n\n```js\n{\n    groupId: 'kafka-node-group',//consumer group id, deafult `kafka-node-group`\n    // Auto commit config\n    autoCommit: true,\n    autoCommitIntervalMs: 5000,\n    // The max wait time is the maximum amount of time in milliseconds to block waiting if insufficient data is available at the time the request is issued, default 100ms\n    fetchMaxWaitMs: 100,\n    // This is the minimum number of bytes of messages that must be available to give a response, default 1 byte\n    fetchMinBytes: 1,\n    // The maximum bytes to include in the message set for this partition. This helps bound the size of the response.\n    fetchMaxBytes: 1024 * 10,\n    // If set true, consumer will fetch message from the given offset in the payloads\n    fromOffset: false,\n    // If set to 'buffer', values will be returned as raw buffer objects.\n    encoding: 'utf8'\n}\n```\nExample:\n\n``` js\nvar kafka = require('kafka-node'),\n    HighLevelConsumer = kafka.HighLevelConsumer,\n    client = new kafka.Client(),\n    consumer = new HighLevelConsumer(\n        client,\n        [\n            { topic: 't' }, { topic: 't1' }\n        ],\n        {\n            groupId: 'my-group'\n        }\n    );\n```\n\n### on('message', onMessage);\nBy default, we will consume messages from the last committed offset of the current group\n\n* `onMessage`: **Function**, callback when new message comes\n\nExample:\n\n``` js\nconsumer.on('message', function (message) {\n    console.log(message);\n});\n```\n\n### on('error', function (err) {})\n\n\n### on('offsetOutOfRange', function (err) {})\n\n### addTopics(topics, cb, fromOffset)\nAdd topics to current consumer, if any topic to be added not exists, return error\n* `topics`: **Array**, array of topics to add\n* `cb`: **Function**,the callback\n* `fromOffset`: **Boolean**, if true, the consumer will fetch message from the specified offset, otherwise it will fetch message from the last commited offset of the topic.\n\nExample:\n\n``` js\nconsumer.addTopics(['t1', 't2'], function (err, added) {\n});\n\nor\n\nconsumer.addTopics([{ topic: 't1', offset: 10 }], function (err, added) {\n}, true);\n```\n\n### removeTopics(topics, cb)\n* `topics`: **Array**, array of topics to remove\n* `cb`: **Function**, the callback\n\nExample:\n\n``` js\nconsumer.removeTopics(['t1', 't2'], function (err, removed) {\n});\n```\n\n### commit(cb)\nCommit offset of the current topics manually, this method should be called when a consumer leaves\n\n* `cb`: **Function**, the callback\n\nExample:\n\n``` js\nconsumer.commit(function(err, data) {\n});\n```\n\n### setOffset(topic, partition, offset)\nSet offset of the given topic\n\n* `topic`: **String**\n\n* `partition`: **Number**\n\n* `offset`: **Number**\n\nExample:\n\n``` js\nconsumer.setOffset('topic', 0, 0);\n```\n\n### pause()\nPause the consumer\n\n### resume()\nResume the consumer\n\n### close(force, cb)\n* `force`: **Boolean**, if set to true, it forces the consumer to commit the current offset before closing, default `false`\n\nExample:\n\n```js\nconsumer.close(true, cb);\nconsumer.close(cb); //force is disabled\n```\n\n## Offset\n### Offset(client)\n* `client`: client which keeps a connection with the Kafka server.\n\n### events\n* `ready`: when zookeeper is ready\n* `connect` when broker is ready\n\n### fetch(payloads, cb)\nFetch the available offset of a specify topic-partition\n\n* `payloads`: **Array**,array of `OffsetRequest`, `OffsetRequest` is a JSON object like:\n\n``` js\n{\n   topic: 'topicName',\n   partition: 0, //default 0\n   // time:\n   // Used to ask for all messages before a certain time (ms), default Date.now(),\n   // Specify -1 to receive the latest offsets and -2 to receive the earliest available offset.\n   time: Date.now(),\n   maxNum: 1 //default 1\n}\n```\n\n* `cb`: *Function*, the callback\n\nExample\n\n```js\nvar kafka = require('kafka-node'),\n    client = new kafka.Client(),\n    offset = new kafka.Offset(client);\n    offset.fetch([\n        { topic: 't', partition: 0, time: Date.now(), maxNum: 1 }\n    ], function (err, data) {\n        // data\n        // { 't': { '0': [999] } }\n    });\n```\n\n### commit(groupId, payloads, cb)\n* `groupId`: consumer group\n* `payloads`: **Array**,array of `OffsetCommitRequest`, `OffsetCommitRequest` is a JSON object like:\n\n``` js\n{\n   topic: 'topicName',\n   partition: 0, //default 0\n   offset: 1,\n   metadata: 'm', //default 'm'\n}\n```\n\nExample\n\n```js\nvar kafka = require('kafka-node'),\n    client = new kafka.Client(),\n    offset = new kafka.Offset(client);\n    offset.commit('groupId', [\n        { topic: 't', partition: 0, offset: 10 }\n    ], function (err, data) {\n    });\n```\n\n### fetchCommits(groupid, payloads, cb)\nFetch the last committed offset in a topic of a specific consumer group\n\n* `groupId`: consumer group\n* `payloads`: **Array**,array of `OffsetFetchRequest`, `OffsetFetchRequest` is a JSON object like:\n\n``` js\n{\n   topic: 'topicName',\n   partition: 0 //default 0\n}\n```\n\nExample\n\n```js\nvar kafka = require('kafka-node'),\n    client = new kafka.Client(),\n    offset = new kafka.Offset(client);\n    offset.fetchCommits('groupId', [\n        { topic: 't', partition: 0 }\n    ], function (err, data) {\n    });\n```\n\n# Todo\n* Compression: gzip & snappy (√)\n\n# LICENSE - \"MIT\"\nCopyright (c) 2015 Sohu.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/SOHU-Co/kafka-node/issues"
  },
  "_id": "kafka-node@0.2.27",
  "dist": {
    "shasum": "a177a71250e474b9eeb89fcc83b7ad491c4622d2"
  },
  "_from": "kafka-node@^0.2.27",
  "_resolved": "https://registry.npmjs.org/kafka-node/-/kafka-node-0.2.27.tgz"
}
